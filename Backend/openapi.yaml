swagger: "2.0"
info:
  description: "API for the backend server of the Secure Access Gate Project"
  version: "1.0.0"
  title: "Secure Access Gate API"

host: "quiet-groove-306310.appspot.com"
basePath: "/api/v1"
tags:

- name: "activity"
  description: "Access to Gate Activities"
- name: "car"
  description: "Access to Cars"
- name: "gate"
  description: "Everything about your Gates"
- name: "user"
  description: "Operations about user"

schemes:
- "https"
- "http"
paths:
  
          
  /activity:
    get:
      tags:
      - "activity"
      summary: "Get all Activities of the user"
      security:
        - jwt: []
      operationId: "getActivities"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "Success"
          schema:
            type: object
            properties:
              activities:
                type: array
                items:
                  $ref: '#/definitions/Activity'
              guests_activities:
                type: array
                items:
                  $ref: '#/definitions/Activity'
        400:
          description: "Invalid input data"
        401:
          description: "Token is missing or invalid"
        404:
          description: "No activity found"

    post:
      tags:
      - "activity"
      summary: "Add an activity of a gate"
      security:
        - jwt: []
      operationId: "addActivity"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
        - name: activityiInfo
          in: body
          description: "All activity information"
          required: True
          schema:
            $ref: '#/definitions/Access'
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        401:
          description: "Token is missing or invalid"
        500:
          description: "Internal server error"

    put:
      tags:
      - "activity"
      summary: "Updates the state of an activity"
      security:
        - jwt: []
      operationId: "updateActivity"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
        - name: activityUpdate
          in: body
          schema:
            type: object
            properties:
              id_gate:
                description: "New status of the activity"
                type: string
                format: uuid
              status:
                $ref: '#/definitions/Status'
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        401:
          description: "Token is missing or invalid"
        404:
          description: "No Activity found"
        500:
          description: "Internal server error"
          
  /car:
    get:
      tags:
      - "car"
      summary: "Get all Cars and Special Rules of the user"
      security:
        - jwt: []
      operationId: "getCars"
      consumes:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "Success"
          schema:
            type: object
            properties:
              cars:
                type: array
                items:
                  $ref: '#/definitions/Car'

        401:
          description: "Token is missing or invalid"
        500:
          description: "Internal server error"

    post:
      tags:
      - "car"
      summary: "Add a Car of the user"
      security:
        - jwt: []
      operationId: "addCar"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
        - name: carInfo
          in: body
          description: "All car information"
          required: True
          schema:
            $ref: '#/definitions/UserCar'
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        401:
          description: "Token is missing or invalid"
        409:
          description: "Car already exists"
        500:
          description: "Internal server error"
          
  /gate:
    get:
      tags:
      - "gate"
      summary: "Get all Gates of the user"
      security:
        - jwt: []
      operationId: "getGate"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "Success"
          schema:
            type: object
            properties:
              gates:
                type: array
                items:
                  $ref: '#/definitions/Gate'
        401:
          description: "Token is missing or invalid"
        404:
          description: "No Gate found"
        500:
          description: "Internal server error"

    post:
      tags:
       - "gate"
      summary: "Add a new Gate for the user"
      security:
        - jwt: []
      operationId: "addGate"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: gateInfo
        in: body
        description: "All gate Information"
        required: True
        schema:
          $ref: '#/definitions/NewGate'
        
      responses:
        200:
          description: "Sucess"
        400:
          description: "Invalid input data"
        401:
          description: "Token is missing or invalid"
        409:
          description: "Gate already exist"
        500:
          description: "Internal server error"
          
  /gate/open:
    post:
      tags:
       - "gate"
      summary: "Open the gate for the user"
      security:
        - jwt: []
      operationId: "openGate"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: gateInfo
        in: body
        description: "The gate to open"
        required: True
        schema:
          type: object
          properties:
            id_gate:
              type: string
              format: uuid
      responses:
        200:
          description: "Sucess"
        400:
          description: "Invalid input data"
        401:
          description: "Token is missing or invalid"
        500:
          description: "Internal server error"
          
  /guest:
    post:
      tags:
       - "car"
      summary: "Add a new special rule for a guest"
      security:
        - jwt: []
      operationId: "addRule"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: ruleInfo
        in: body
        description: "All special rule Information"
        required: True
        schema:
          $ref: '#/definitions/GuestCar'
        
      responses:
        200:
          description: "Sucess"
        400:
          description: "Invalid input data"
        401:
          description: "Token is missing or invalid"
        500:
          description: "Internal server error"
          
  /user:
    get:
      tags:
      - "user"
      summary: "Get all user info"
      security:
        - jwt: []
      operationId: "getuser"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "Success"
          schema:
            type: object
            properties:
              user:
                $ref: '#/definitions/User'
        401:
          description: "Token is missing or invalid"
        404:
          description: "User not found"
        500:
          description: "Internal server error"
          
  /user/signin:
    post:
      tags:
      - "user"
      summary: "Create a user"
      operationId: "createUser"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - in: body
        name: accountInfo
        description: "Created user object"
        required: True
        schema:
          $ref: "#/definitions/NewUser"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        409:
          description: "User laready exists"
        500: 
          description: "Internal server error"

  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      security:
        - auth: []
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "Success"
          schema:
            type: object
            properties:
              jwt_token:
                type: string
              jwt_token_expiry:
                type: string
        400:
          description: "Invalid input data"
        401:
          description: "Invalid username/password supplied"
        500:
          description: "Internal server error"
          
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      security:
        - jwt: []
      responses:
        200:
          description: "Success"
        401:
          description: "Token is missing or invalid"
        404:
          description: "User not foud"
        500:
          description: "Internal server error"
  
  /user/location:
    post:
      tags:
      - "user"
      summary: "Send the current location of the user"
      security:
        - jwt: []
      operationId: "updateLocation"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
        - name: lastLocation
          in: body
          description: "Last recorded user location"
          required: True
          schema:
            $ref: '#/definitions/Location'
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        401:
          description: "Token is missing or invalid"
        404:
          description: "User not found"
        500:
          description: "Internal server error"
          
  /fcm:
    post:
      description: "Update the FCM token"
      operationId: "updateFCM"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
        - name: FCMtoken
          in: body
          schema:
            type: object
            properties:
              fcm_token:
                type: string
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        401:
          description: "Token is invalid"
        500:
          description: "Internal server error"
    

  /jwt:
    post:
      description: "Refresh the expiry jwt"
      operationId: "refreshJWT"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
        - name: jwtRefreshToken
          in: body
          schema:
            type: object
            properties:
              jwt_refresh:
                type: string

      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        401:
          description: "Token is invalid"
        404:
          description: "User not found"
        500:
          description: "Internal server error"
        


securityDefinitions:
  auth:
    type: basic

  jwt:
    type: "apiKey"
    name: "jwt_token"
    in: "header"
    
definitions:
  Gate:
    type: object
    properties:
      ID:
        type: string
        format: uuid
      ID_User:
        type: integer
      Name:
        type: string
        maxLength: 30
      Location:
        type: string
      Photo:
        $ref: '#/definitions/ImageURL'
        
  NewGate:
    type: object
    properties:
      id_gate:
        type: string
        format: uuid
      name:
        type: string
        maxLength: 30
      location:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      photo:
        $ref: '#/definitions/Image'
        
  Access:
    type: object
    properties:
      photo:
        $ref: '#/definitions/Image'
      id_gate:
        type: string
        format: uuid
      license:
        type: string
        pattern: "^[A-Z]{2}[0-9]{3}[A-Z]{2}$"
      color:
        $ref: '#/definitions/Color'
        
        
  Activity:
    type: object
    properties:
      ID_User:
        type: integer
      ID_Gate:
        type: string
        format: uuid
      ID_Car:
        type: integer
      Date_Time:
        type: string
        format: date-time
      Outcome:
        $ref: '#/definitions/Status'
      Photo:
        $ref: '#/definitions/ImageURL'
        
  Car:
    type: object
    properties:
      ID:
        type: integer
      Plate:
        type: string
        pattern: "^[A-Z]{2}[0-9]{3}[A-Z]{2}$"
      Brand:
        type: string
      Color:
        $ref: '#/definitions/Color'
      ID_User:
        type: integer
      Deadline:
        type: string
        format: date-time
      Nickname:
        type: string
        
  UserCar:
    type: object
    properties:
      license:
        type: string
        pattern: "^[A-Z]{2}[0-9]{3}[A-Z]{2}$"
      brand:
        type: string
      color:
        $ref: '#/definitions/Color'
        
  GuestCar:
    type: object
    properties:
      nickname:
        type: string
      dead_line:
        type: string
        format: date-time
    allOf:
      - $ref: '#/definitions/UserCar'
      
  User:
    type: object
    properties:
      ID:
        type: integer
      Email:
        type: string
        format: email
      PWD:
        type: string
      Nickname:
        type: string
      Jwt_refresh:
        type: string
      FCM_token:
        type: string
      Photo:
        $ref: '#/definitions/ImageURL'
        
  NewUser:
    type: object
    properties:
      nickname:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
        
  ImageURL:
    type: string
        
  Image:
      type: string
      format: byte #64base encoded
        
  Status:
    type: string
    description: "Outcome of the activity"
    enum:
    - "Granted"
    - "Denied"
    - "Ignored"
    - "Pending"
    - "Reported"
    
  Color:
    type: string
    description: "Possible recognized car color"
    enum:
    - "Black"
    - "Blue"
    - "Cyan"
    - "Green"
    - "Gray"
    - "Red"
    - "White"
    - "Yellow"
    
  Location:
    type: object
    properties:
      altitude:
        type: string
        maxLength: 16
      latitude:
        type: string
        maxLength: 16
      longitude:
        type: string
        maxLength: 16
