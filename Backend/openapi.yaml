swagger: "2.0"
info:
  description: "API for the backend server of the Secure Access Gate Project"
  version: "1.0.0"
  title: "Secure Access Gate API"

host: "iotproject.appspot.com"
basePath: "/api/v1"
tags:
- name: "gate"
  description: "Everything about your Gates"
- name: "activity"
  description: "Access to Gate Activities"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /gate:
    get:
      tags:
      - "gate"
      description: "Get all Gates of the user"
      security:
        - jwt: []
      operationId: "getGate"
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: '#/definitions/Gate'
        404:
          description: "No Gate found"
        400:
          description: "Invalid input data"
    post:
      tags:
       - "gate"
      description: "Add a new Gate for the user"
      security:
        - jwt: []
      operationId: "addGate"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
      - name: gateInfo
        in: body
        description: "All gate Information"
        required: True
        schema:
          $ref: '#/definitions/Gate'
        
      responses:
        200:
          description: "Sucess"
        400:
          description: "Invalid input data"
        409:
          description: "Gate already exist"
        500:
          description: "Internal server error"
          
  /activity:
    get:
      tags:
      - "activity"
      description: "Get all Activities of the user"
      security:
        - jwt: []
      operationId: "getActivities"
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: '#/definitions/Activity'
        404:
          description: "No activity found"
        400:
          description: "Invalid input data"
          
    post:
      tags:
      - "activity"
      description: "Add an activity of a gate"
      security:
        - jwt: []
      operationId: "addActivity"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
        - name: activityiInfo
          in: body
          description: "All activity information"
          required: True
          schema:
            $ref: '#/definitions/Activity'
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        409:
          description: "Activity already exists"
        500:
          description: "Internal server error"

    put:
      tags:
      - "activity"
      description: "Updates the state of an activity"
      security:
        - jwt: []
      operationId: "updateActivity"
      consumes:
      - "application/json"
      - "application/xml"
      parameters:
        - name: activityUpdate
          in: body
          schema:
            type: object
            properties:
              activityId:
                description: "New status of the activity"
                type: string
              status:
                $ref: '#/definitions/Status'
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        404:
          description: "No Activity found"
        500:
          description: "Internal server error"
          
  /user:
    post:
      tags:
      - "user"
      description: "Create a user"
      operationId: "createUser"
      consumes:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: True
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"

  /user/login:
    get:
      tags:
      - "user"
      description: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: True
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: True
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid input data"
        401:
          description: "Invalid username/password supplied"
          
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /jwt:
    post:
      description: "Refresh the expiry jwt"
      operationId: "refreshJWT"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
        - name: jwtRefreshToken
          in: body
          schema:
            type: string

      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input data"
        403:
          description: "Token is invalid"
        


securityDefinitions:
  auth:
    type: "oauth2"
    authorizationUrl: "http://secureaccessgate.appcompact.com/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  jwt:
    type: "apiKey"
    name: "jwt_token"
    in: "header"
    
definitions:
  Gate:
    type: object
    properties:
      name:
        type: string
        maxLength: 16
      location:
        type: string
      status:
        type: string
        description: "Order status"
        enum:
        - "open"
        - "closed"
        - "undefined"
      id:
        type: string
      owner:
        type: string
        
  Activity:
    type: object
    properties:
      image:
        $ref: '#/definitions/Image'
      access:
        $ref: '#/definitions/Status'
      date:
        type: string
        format: date-time
      gate:
        $ref: '#/definitions/Gate'
        
  Image:
    type: object
    properties:
      image:
        type: string
        format: byte #64base encoded
        
  Status:
    type: string
    description: "Outcome of the activity"
    enum:
    - "granted"
    - "denied"
    - "ignored"
    - "pending"
    - "reported"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
